#!/usr/bin/env bash

set -e

cxxet_include scripts/commands/compile

function large() {
    # don't "test" all reasonable presets but only single one:
    local default_preset=tsan
    local preset="${default_preset}"
    local interleaving='false'
    local reps=1
    local out_dir_base="${CXXET_ROOT_DIR}/tmp"
    local out_dir

    function usage() {
        {
            if [[ "$1" != '--short' ]]; then
                printf 'large: run large benchmarks with specified preset\n'
            fi
            printf 'Usage: benchmarks large [options...]\n'
            printf 'Where options are:\n'
            printf '    --preset, -p PRESET        Run benchmarks with the specified preset (default: %s)\n' "${default_preset}"
            printf '    --interleaving, -i         Run all benchmarks in parallel\n'
            printf '    --repetitions, -n N        Run this many instances of each benchmark (default %s)\n' "${reps}"
            printf '    --out-dir, -o OUT          Directory to store output files in (default: autogenerated under "%s")\n' "${out_dir_base}"
            printf '    --help, -h                 Show this help message\n'
        } >&2
    }

    while (( $# > 0 )); do
        case "$1" in
            -p|--preset)
                preset="${2:?No preset specified!}"
                shift 2
                ;;
            --interleaving|-i)
                interleaving='true'
                shift
                ;;
            --repetitions|-n)
                reps="${2:?No repetitions specified!}"
                shift 2
                ;;
            --out-dir|-o)
                out_dir="${2:?No output directory specified!}"
                shift 2
                ;;
            --help|-h)
                usage
                return 0
                ;;
            *)
                printf 'Unknown option: %s\n' "$1" >&2
                usage --short
                exit 1
                ;;
        esac
    done

    if [[ -z "${out_dir}" ]]; then
        out_dir="${out_dir_base}/$(date +%Y-%m-%dT%H-%M-%S)_benchmarks/${preset}/large"
    fi
    mkdir -p "${out_dir}"

    printf -- '-=-=-=-=-=-=-=- Building needed targets (with preset %s) for large benchmarks:\n' "${preset}" >&2
    compile \
        --quiet \
        --preset "${preset}" \
        --target cxxet_large_benchmarks \
        --last-defines \
        --ignore-compile_commands >&2

    local bin_dir="${CXXET_ROOT_DIR}/bin/${preset}"

    printf -- '-=-=-=-=-=-=-=- Executing %s benchmarks:\n' "${preset}" >&2
    (
        set -x
        # TODO #164 run the actual large benchmarks ...
        "${bin_dir}/cxxet_benchmarks" "${benchmark_args[@]}"
    ) >&2
    printf '\n' >&2

    # TODO #164 remove or refactor (to use "${out_dir}" - create dedicated file there?!)
    #if [[ -f "${out_file}" ]]; then
    #    local temp_file="$(mktemp "${out_file}.XXXXXX")"
    #    local git_hash="$(git -C "${CXXET_ROOT_DIR}" rev-parse HEAD 2>/dev/null || printf "N/A")"
    #    local git_dirty="$(git -C "${CXXET_ROOT_DIR}" diff --shortstat)"
#
    #    jq --arg hash "${git_hash}${git_dirty:+ (dirty)}" '.context.cxxet_git_hash = $hash' "${out_file}" > "${temp_file}"
    #    mv "${temp_file}" "${out_file}"
    #fi
}
