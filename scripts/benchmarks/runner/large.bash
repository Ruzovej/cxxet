#!/usr/bin/env bash

set -e

cxxet_include scripts/commands/compile

function large() {
    # don't "test" all reasonable presets but only single one:
    local default_preset=release
    local preset="${default_preset}"
    local run_bare='true'
    local reps=1
    local out_dir_base="${CXXET_ROOT_DIR}/tmp"
    local out_dir
    local dry_run='false'

    function usage() {
        {
            if [[ "$1" != '--short' ]]; then
                printf 'large: run large benchmarks with specified preset\n'
            fi
            printf 'Usage: benchmarks large [options...]\n'
            printf 'Where options are:\n'
            printf '    --preset, -p PRESET  Run benchmarks with the specified preset (default: %s)\n' "${default_preset}"
            printf '    --skip-bare, -b      Skip baseline ("bare") version of each benchmark\n'
            printf '    --repetitions, -n N  Run this many instances of each benchmark (default %s)\n' "${reps}"
            printf '    --out-dir, -o OUT    Directory to store output files in (default: autogenerated under "%s")\n' "${out_dir_base}"
            printf '    --dry-run, -d        Only print what & how would be executed\n'
            printf '    --help, -h           Show this help message\n'
        } >&2
    }

    while (( $# > 0 )); do
        case "$1" in
            -p|--preset)
                preset="${2:?No preset specified!}"
                shift 2
                ;;
            --skip-bare|-b)
                run_bare='false'
                shift
                ;;
            --repetitions|-n)
                reps="${2:?No repetitions specified!}"
                shift 2
                ;;
            --out-dir|-o)
                out_dir="${2:?No output directory specified!}"
                shift 2
                ;;
            --dry-run|-d)
                dry_run='true'
                shift
                ;;
            --help|-h)
                usage
                return 0
                ;;
            *)
                printf 'Unknown option: %s\n' "$1" >&2
                usage --short
                exit 1
                ;;
        esac
    done

    if [[ -z "${out_dir}" ]]; then
        out_dir="${out_dir_base}/$(date +%Y-%m-%dT%H-%M-%S)_benchmarks/${preset}/large"
    fi

    if [[ "${dry_run}" == 'false' ]]; then
        mkdir -p "${out_dir}"

        printf -- '-=-=-=-=-=-=-=- Building needed targets (with preset %s) for large benchmarks:\n' "${preset}" >&2
        compile \
            --quiet \
            --preset "${preset}" \
            --target cxxet_large_benchmarks \
            --last-defines \
            --ignore-compile_commands >&2
    fi

    local bin_dir="${CXXET_ROOT_DIR}/bin/${preset}"

    function do_run_large_benchmark() {
        local executable="${1:?}"
        local num_iters="${2:?}"
        local marker_after_iter="${3:?}"
        local cxxet_reserve_buffer="${4:?}"
        local num_threads="${5:?}"
        local result_base="${6:?}"

        local args=(
            "${num_iters}"
            "${marker_after_iter}"
            "${cxxet_reserve_buffer}"
            "${num_threads}"
            "${result_base}"
        )

        if [[ "${dry_run}" == 'false' ]]; then
            [[ -x "${executable}" ]] || return 1
            (
                set -x
                "${executable}" \
                    "${args[@]}"
            ) >&2
        else
            printf '%s %s %s %s %s %s\n' \
                "${executable}" \
                    "${args[@]}" >&2
        fi
    }

    function run_large_benchmark() {
        local bin_dir="${1:?}"
        local bench_name="${2:?}"
        local num_iters="${3:?}"
        local marker_after_iter="${4:?}"
        local cxxet_reserve_buffer="${5:?}"
        local num_threads="${6:?}"
        local out_dir="${7:?}"

        local executable="${bin_dir}/${bench_name}"
        local result_base="${out_dir}/${bench_name}-${num_iters}-${marker_after_iter}-${cxxet_reserve_buffer}-${num_threads}"

        if [[ "${run_bare}" == 'true' ]]; then
            do_run_large_benchmark \
                "${executable}_bare" \
                "${num_iters}" \
                "${marker_after_iter}" \
                "${cxxet_reserve_buffer}" \
                "${num_threads}" \
                "${result_base}_bare"
        fi
        do_run_large_benchmark \
            "${executable}" \
            "${num_iters}" \
            "${marker_after_iter}" \
            "${cxxet_reserve_buffer}" \
            "${num_threads}" \
            "${result_base}"
    }

    printf -- '-=-=-=-=-=-=-=- Executing %s large benchmarks:\n' "${preset}" "${out_dir}" >&2

    local num_executed_benchmarks=0
    local inner_loop_executions=1
    if [[ "${run_bare}" == 'true' ]]; then
        inner_loop_executions=2
    fi

    local rep
    for rep in $(seq 1 "${reps}"); do
        [[ "${reps}" == 1 ]] || printf -- '-=-=-=-=-=-=-=- round %s/%s\n' "${rep}" "${reps}" >&2

        local benchmark_name
        local large_benchmarks=(
            cxxet_bench_mt_counter
            cxxet_bench_st_instant
            cxxet_bench_st_guarded_instant
            cxxet_bench_st_complete
            cxxet_bench_st_duration
        )

        for benchmark_name in "${large_benchmarks[@]}"; do
            local num_threads
            local marker_after_iters
            if [[ "${benchmark_name}" =~ ^cxxet_bench_st_ ]]; then
                # unused by such benchmarks
                marker_after_iters=(1)
                num_threads=(1)
            else
                marker_after_iters=(1 100)
                num_threads=(1 4 16)
            fi

            local num_iters
            for num_iters in 100 10000 1000000; do # 3 values
                local mai
                for mai in "${marker_after_iters[@]}"; do # 1 or 2 values
                    local cxxet_reserve_buffer
                    for cxxet_reserve_buffer in "$((num_iters / 8))" "${num_iters}" "$((num_iters * 4))"; do # 3 values
                        local nths
                        for nths in "${num_threads[@]}"; do # 1 or 3 values
                            # either 9 or 64 combinations ...!!!
                            # this below is either 1 or 2 runs ...
                            run_large_benchmark \
                                "${bin_dir}" \
                                "${benchmark_name}" \
                                "${num_iters}" \
                                "${mai}" \
                                "${cxxet_reserve_buffer}" \
                                "${nths}" \
                                "${out_dir}"

                            num_executed_benchmarks="$((num_executed_benchmarks + inner_loop_executions))"
                        done
                    done
                done
            done
            printf '\n' >&2
        done
    done

    printf -- '-=-=-=-=-=-=-=- Executed %s large benchmarks (with out_dir "%s")\n' "${num_executed_benchmarks}" "${out_dir}" >&2

    # TODO #164 remove or refactor (to use "${out_dir}" - create dedicated file there?!)
    #if [[ -f "${out_file}" ]]; then
    #    local temp_file="$(mktemp "${out_file}.XXXXXX")"
    #    local git_hash="$(git -C "${CXXET_ROOT_DIR}" rev-parse HEAD 2>/dev/null || printf "N/A")"
    #    local git_dirty="$(git -C "${CXXET_ROOT_DIR}" diff --shortstat)"
#
    #    jq --arg hash "${git_hash}${git_dirty:+ (dirty)}" '.context.cxxet_git_hash = $hash' "${out_file}" > "${temp_file}"
    #    mv "${temp_file}" "${out_file}"
    #fi
}
